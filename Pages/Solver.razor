@page "/solver"
@inject HttpClient Http

<h1>TSPSolver</h1>

<p>heeeeeeeeeello</p>

@if (specs == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <label>
        TSP specification:
        <select class="form-control" @onchange="TSPSpecSelected">
                @foreach(var spec in specs)
                {
                    <option>@spec.Name</option>                
                }
        </select>
    </label>
    <br />
    <BECanvas @ref="scene" Width="500" Height="500"></BECanvas>
}

@code {
    public class SerializableLocation
    {
        public double X { get; set; }
        public double Y { get; set; }

        public static Location ToDomain(SerializableLocation location)
        {
            return new Location(location.X, location.Y);
        }

        public override string ToString()
        {
            return X + ", " + Y;
        }
    }

    public class SerializabelTSPSpec
    {
        public string Name { get; set; }

        public int[] OptTour { get; set; }

        public SerializableLocation[] Cities { get; set; }

        public static TSPSpec ToDomain(SerializabelTSPSpec spec)
        {
            return new TSPSpec(spec.Name, spec.OptTour, spec.Cities.Select(SerializableLocation.ToDomain).ToList());
        }

        public override string ToString()
        {
            var coordinates = string.Join(",", (IEnumerable<SerializableLocation>)Cities);
            return $"{Name} ({Cities.Length} cites): ({coordinates})";
        }
    }

    TSPSpec[] specs;
    TSPSpec selectedTSPSpec;

    protected override async Task OnInitializedAsync()
    {
        var serverSpecs = await Http.GetJsonAsync<SerializabelTSPSpec[]>("actual-data/tspspecs.json");
        Console.WriteLine($"{string.Join(Environment.NewLine,(IEnumerable<SerializabelTSPSpec>)serverSpecs)}");
        specs = serverSpecs.Select(SerializabelTSPSpec.ToDomain).OrderBy(spec => spec.Cities.Count).ToArray();
        selectedTSPSpec = specs.FirstOrDefault();
    }

    private void TSPSpecSelected(ChangeEventArgs e)
    {
        var specName = (string)e.Value;
        Console.WriteLine($"Selected Spec: {specName}");
        selectedTSPSpec = specs.Single(spec => spec.Name == specName);
    }

    BECanvasComponent scene;

    override protected async Task OnAfterRenderAsync(bool firstRender)
    {
        if (scene == null)
        {
            return;
        }

        var context = await scene.CreateCanvas2DAsync();
        await context.ClearRectAsync(0, 0, scene.Width, scene.Height);

        if (selectedTSPSpec == null)
        {
            return;
        }

        var minX = selectedTSPSpec.Cities.Select(location => location.X).Min();
        var minY = selectedTSPSpec.Cities.Select(location => location.Y).Min();
        var maxX = selectedTSPSpec.Cities.Select(location => location.X).Max();
        var maxY = selectedTSPSpec.Cities.Select(location => location.Y).Max();

        Location GetSceneCoordinates(Location city)
        {
            const int padding = 10;
            var yRatio = (scene.Height - 2 * padding) / (maxY - minY);
            var xRatio = (scene.Width - 2 * padding) / (maxX - minX);

            var y = (city.Y - minY) * yRatio + padding;
            var x = (city.X - minX) * xRatio + padding;

            return new Location(x, y);
        }

        foreach (var city in selectedTSPSpec.Cities.Select(GetSceneCoordinates))
        {
            await context.BeginPathAsync();
            await context.MoveToAsync(city.X, city.Y);
            await context.ArcAsync(city.X, city.Y, 2, 0, Math.PI * 2, true);
            await context.FillAsync();
        }
    }

}